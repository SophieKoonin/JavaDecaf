JavaDecaf Compiler:  Reading from file DecafSysOut.jdc . . .
Call:   CompilationUnit
  Call:   DecafBlock
    Call:   BlockStatement
      Call:   Statement
        Call:   StatementExpression
          Call:   PostfixExpression
            Call:   PrimaryExpression
              Call:   PrimaryPrefix
                Call:   Name
                  Consumed token: <<IDENTIFIER>: "System" at line 1 column 1>
                  Consumed token: <"." at line 1 column 7>
                  Consumed token: <<IDENTIFIER>: "out" at line 1 column 8>
                  Consumed token: <"." at line 1 column 11>
                  Consumed token: <<IDENTIFIER>: "println" at line 1 column 12>
                Return: Name
              Return: PrimaryPrefix
              Call:   PrimarySuffix
                Call:   Arguments
                  Consumed token: <"(" at line 1 column 19>
                  Call:   ArgumentList
                    Call:   Expression
                      Call:   ConditionalExpression
                        Call:   ConditionalOrExpression
                          Call:   ConditionalAndExpression
                            Call:   InclusiveOrExpression
                              Call:   ExclusiveOrExpression
                                Call:   AndExpression
                                  Call:   EqualityExpression
                                    Call:   InstanceOfExpression
                                      Call:   RelationalExpression
                                        Call:   ShiftExpression
                                          Call:   AdditiveExpression
                                            Call:   MultiplicativeExpression
                                              Call:   UnaryExpression
                                                Call:   UnaryExpressionNotPlusMinus
                                                  Call:   PostfixExpression
                                                    Call:   PrimaryExpression
                                                      Call:   PrimaryPrefix
                                                        Call:   Literal
                                                          Consumed token: <<STRING_LITERAL>: ""Hello world!"" at line 1 column 20>
                                                        Return: Literal
                                                      Return: PrimaryPrefix
                                                    Return: PrimaryExpression
                                                  Return: PostfixExpression
                                                Return: UnaryExpressionNotPlusMinus
                                              Return: UnaryExpression
                                            Return: MultiplicativeExpression
                                          Return: AdditiveExpression
                                        Return: ShiftExpression
                                      Return: RelationalExpression
                                    Return: InstanceOfExpression
                                  Return: EqualityExpression
                                Return: AndExpression
                              Return: ExclusiveOrExpression
                            Return: InclusiveOrExpression
                          Return: ConditionalAndExpression
                        Return: ConditionalOrExpression
                      Return: ConditionalExpression
                    Return: Expression
                  Return: ArgumentList
                  Consumed token: <")" at line 1 column 34>
                Return: Arguments
              Return: PrimarySuffix
            Return: PrimaryExpression
          Return: PostfixExpression
        Return: StatementExpression
        Consumed token: <";" at line 1 column 35>
      Return: Statement
    Return: BlockStatement
  Return: DecafBlock
  Consumed token: <<EOF> at line 1 column 35>
Return: CompilationUnit
JavaDecaf Compiler:  Transformation completed successfully.