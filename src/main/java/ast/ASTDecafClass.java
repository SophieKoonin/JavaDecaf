/* Generated By:JJTree: Do not edit this line. ASTDecafClass.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package ast;

import parser.*;

import java.io.PrintWriter;
import static ast.NodeUtils.EOL;

public
class ASTDecafClass extends SimpleNode {
    public ASTDecafClass(int id) {
        super(id);
    }

    public ASTDecafClass(JDCParser p, int id) {
        super(p, id);
        indent = false;
        decafClass = true;
    }

    public void process(PrintWriter ostr) {
	  String TAB = NodeUtils.INDENTATION;
	  // FIXME: This is all in one to keep line numbers in the Java code as close as possible to the Java Decaf code.
	  //        This should be addressed better by capturing the errors of javac and subtracting from them. 
        String topBoilerPlate = "import java.util.Scanner;" + "public class " + parser.getClassName() + " { ";

        ostr.print(topBoilerPlate);
        super.process(ostr);

	  // Add JavaDecaf "read" methods; "print" methods are not added because it is just too much unnecessary
	  // boilerplate (there are 10 polymorphic versions of System.out.println()): it is much simpler and
	  // cleaner to replace printX for System.out.printX in the AST. 
	  String input     = EOL + TAB + "private static Scanner __input = new Scanner(System.in);" + EOL;
	  String readLine  = EOL + TAB + "public static String readLine()  { return __input.nextLine(); }" + EOL;
	  String readInt   = EOL + TAB + "public static int    readInt()   { return Integer.parseInt(readLine());  }" + EOL;
	  String readDouble= EOL + TAB + "public static double readdouble(){ return Double.parseDouble(readLine());}" + EOL;
	  ostr.print(EOL + input + readLine + readInt + readDouble);

	  ClosingBraceSimpleNode.closeBracket(ostr, indentationLevel);
    }


}
/* JavaCC - OriginalChecksum=ba592f10a30b87d2e827995b8d4e8c28 (do not edit this line) */
