/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 5.0 */
/* JavaCCOptions:KEEP_LINE_COL=null */
package parser;

/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public class ParseException extends Exception {

  /**
   * The version identifier for this Serializable class.
   * Increment only if the <i>serialized</i> form of the
   * class changes.
   */
  private static final long serialVersionUID = 1L;

  /**
   * This constructor is used by the method "generateParseException"
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.
   */
  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal
                       )
  {
    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
  }

  /**
   * The following constructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the class "Throwable".  The fields "errorToken",
   * "expectedTokenSequences", and "tokenImage" do not contain
   * relevant information.  The JavaCC generated code does not use
   * these constructors.
   */

  public ParseException() {
    super();
  }

  /** Constructor with message. */
  public ParseException(String message) {
    super(message);
  }


  /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */
  public Token currentToken;

  /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */
  public int[][] expectedTokenSequences;

  /**
   * This is a reference to the "tokenImage" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */
  public String[] tokenImage;

    /* Begin modified code by SK */

  /**
   * It uses "currentToken" and "expectedTokenSequences" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser) the correct error message
   * gets displayed.
   */
  private static String initialise(Token currentToken,
                           int[][] expectedTokenSequences,
                           String[] tokenImage) {
    String eol = System.getProperty("line.separator", "\n");
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(eol).append("    ");
    } //TODO could delete this?

    String retval = "\nEncountered \"";
      if (currentToken.image == null) {   //if current token is null, probably caused by lookahead, move to next token (avoid NullPointerException)
          currentToken = currentToken.next;
      }
    Token nextToken = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";

      retval += currentToken.image; //print the token appearing before the error
      retval += "\" followed by \"";
        if (nextToken.kind == 0) {  //end of file
            retval += "end of file";
            break;
        }
      retval += add_escapes(nextToken.image); //print the offending token
    }
    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
    retval += "." + eol;

      if (isIdentifier(currentToken.kind) && isLiteral(nextToken.kind)) {    //if current token is IDENTIFIER and next is any literal
          retval += "You may have forgotten to include parentheses around an argument- \"" + currentToken.image + "(" + currentToken.next.image + ")\"";
      } else if ((currentToken.kind == JDCParserConstants.SEMICOLON || currentToken.kind == JDCParserConstants.RBRACE) && nextToken.kind == JDCParserConstants.EOF) {   //semicolon or closing brace followed by EOF
          retval += "You may have forgotten a closing brace } after \"" + currentToken.image + "\"";
      } else if ((currentToken.kind == JDCParserConstants.RPAREN || isIdentifier(currentToken.kind) || isLiteral(currentToken.kind)) && //rparen or identifier
              (nextToken.kind == JDCParserConstants.EOF || //followed by EOF...
                      ((nextToken.specialToken!=null && nextToken.specialToken.image.equals(eol))))) {  //...or newline
          retval += "You may be missing a semicolon after \"" + currentToken.image + "\"";
      } else if (currentToken.kind == JDCParserConstants.STRING_LITERAL && isIdentifier(nextToken.kind)) { //String literal followed by identifier - didn't escape quotations or use + for concatenation
          retval += "If you are using quotation marks within a string, you need to escape them by adding a backslash: \ne.g. println(\"say \\\"hello\\\"!\") ." +
                  "\nIf you are trying to join multiple strings, make sure you concatenate them with +: \ne.g. println(\"hello\" + name + \"!\")\"; .";
      } else if (isIdentifier(currentToken.kind) && (isIdentifier(nextToken.kind) || isLiteral(nextToken.kind)) && expectedTokenSequences[1][0] == JDCParserConstants.RPAREN) {
          retval += "You may be missing a quotation mark." +
                  "\nIf you are trying to join multiple strings, make sure you concatenate them with +: \ne.g. println(greeting + name + \"!\")\"; ." +
                  "\nIf these variables are separate method arguments, they should be separated by commas: e.g. method(arg1, arg 2);";
      } else if (currentToken.kind == JDCParserConstants.ASSIGN && (nextToken.kind == JDCParserConstants.GT || nextToken.kind == JDCParserConstants.LT)) {  //Equals followed by gt/lt - wrong order
          retval += "Did you mean: " + nextToken.image + currentToken.image; //suggest correct order
      } else if (isIdentifier(currentToken.kind) && nextToken.kind == JDCParserConstants.CLASS) {
          retval += "Did you mean one of: public, private, protected"; //access modifiers before 'class'
      } else if ((currentToken.kind == JDCParserConstants.RPAREN || isLiteral(currentToken.kind) || isIdentifier(currentToken.kind))
              && (nextToken.kind == JDCParserConstants.LBRACE || nextToken.kind == JDCParserConstants.SEMICOLON)
              && expectedTokenSequences[1][0] == JDCParserConstants.RPAREN) {
          retval += "Unmatched parentheses: you may be missing a closing parenthesis.";
      } else if (currentToken.kind == JDCParserConstants.RPAREN && nextToken.kind == JDCParserConstants.SEMICOLON && expectedTokenSequences[0][0] == JDCParserConstants.THROWS) { //rparen, semicolon, and first expected token is 'throws'
          retval += "There are no semicolons in method declarations.";
      } else if ((isIdentifier(currentToken.kind)|| currentToken.image.equals("void") || isReservedKeyword(currentToken.kind)) && //identifier or "void" followed by reserved keyword
              isReservedKeyword(nextToken.kind)) {
          retval += "\"" + nextToken.image + "\" is a reserved keyword in Java and cannot be used as a method or variable name.";
      } else if (nextToken.kind == JDCParserConstants.IF && nextToken.next.kind != JDCParserConstants.RPAREN) {
        retval += "You may have forgotten parentheses round the if statement: e.g. if (x > y) { ... }";
      } else if (isIdentifier(currentToken.kind) && nextToken.kind == JDCParserConstants.ASSIGN) {
          retval += "You may have forgotten to define a name for a variable: e.g. int myNum = 5; ";
      }

    retval += eol + expected.toString();    //DEBUG - print list of tokens expected afterwards
    return retval;
  }

    /**
     * Check to see if a token is a reserved keyword
     * @return true if token is a reserved keyword
     */
    public static boolean isReservedKeyword(int kind){
        return (kind >= JDCParserConstants.ABSTRACT && kind <= JDCParserConstants.WHILE);
    }

    /**
     * Check to see if token is an identifier
     * @return true if identifier
     */
    public static boolean isIdentifier(int kind) {
        return (kind == JDCParserConstants.IDENTIFIER);
    }

    /**
     * Check to see if a token is a literal
     * @return true if literal
     */
    public static boolean isLiteral(int kind){
        return (kind >= JDCParserConstants.INTEGER_LITERAL && kind <= JDCParserConstants.STRING_LITERAL);
    }

    /**
     * Check to see if a token is a primitive type
     * @return true if primitive type
     */
    public static boolean isPrimitive(int kind){
        return (kind == JDCParserConstants.INT
                || kind == JDCParserConstants.FLOAT
                || kind == JDCParserConstants.SHORT
                || kind == JDCParserConstants.BYTE
                || kind == JDCParserConstants.DOUBLE
                || kind == JDCParserConstants.CHAR
                || kind == JDCParserConstants.LONG);
    }
    /* End of modified code by SK */

  /**
   * The end of line string for this machine.
   */
  protected String eol = System.getProperty("line.separator", "\n");

  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
  static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':;
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

}
/* JavaCC - OriginalChecksum=16ba3edbb338127335444b2b77a37aa1 (do not edit this line) */
